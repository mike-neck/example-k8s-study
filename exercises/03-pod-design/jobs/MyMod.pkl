@ModuleInfo { minPklVersion = "0.26.0" }
module com.example.MyMod

import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.1.1#/api/batch/v1/JobSpec.pkl"

hidden jobName: String = ""
hidden repeatTaskCount: Int? = 1
hidden timeoutSeconds: Int? = 30
hidden waitInterval: Int = 6

hidden cimgBase: String = "cimg/base:2024.10"

function taskScript(): String = """
  readonly interval="\(waitInterval)"

  """ +
// language=bash
  """
  declare count=0
  while [[ "${count}" -lt 10 ]]; do
    count="$(( count + 1 ))"
    echo "$(date '+%Y-%m-%dT%H:%M:%S') - count = ${count}"
    sleep "${interval}"
  done
  """

function jobSpec(): JobSpec = new JobSpec {
  activeDeadlineSeconds = timeoutSeconds
  completions = repeatTaskCount
}

function jobLabel(): Mapping<String, String> = new Mapping {
  ["run"] = jobName
}

local lazyRenderer: (String) -> ValueRenderer =
  (format) -> if (format == "json") new JsonRenderer {}
  else if (format == "yaml") new YamlRenderer { isStream = true }
  else throw("unknown format for k8s resource: \(format), available: [json, yaml]")

output {
  local  format = read?("prop:pkl.outputFormat") ?? "yaml"
  renderer = (lazyRenderer.apply(format)) {
    converters {
      [DataSize] = (size: DataSize) ->
          let (unit = size.unit)
            let (k8sUnit =
              if (unit.length == 3) unit[0].toUpperCase() + unit[1]
              else if (unit.length == 2) unit[0].toUpperCase()
              else "")
              "\(size.value)\(k8sUnit)"
    }
  }
}
